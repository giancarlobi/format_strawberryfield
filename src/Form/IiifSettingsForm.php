<?php

namespace Drupal\format_strawberryfield\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\format_strawberryfield\Tools\IiifUrlValidator;


/**
 * Class IiifSettingsForm.
 */
class IiifSettingsForm extends ConfigFormBase {

  /**
   * Constructs a \Drupal\system\ConfigFormBase object.
   *
   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
   *   The factory for configuration objects.
   */
  public function __construct(ConfigFactoryInterface $config_factory) {
    $this->setConfigFactory($config_factory);
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('config.factory')
    );
  }


  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames() {
    return [
      'format_strawberryfield.iiif_settings',
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'format_strawberryfield_iiif_settings_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $config = $this->config('format_strawberryfield.iiif_settings');
    $form['info'] = [
      '#markup' => $this->t('This IIIF Server configuration URLs are used as defaults for field formatters using IIIF, but can be overriden on a one by one basis when setting up your formatters for each Display Mode.'),
      ];

    $form['pub_server_url'] = [
      '#type' => 'url',
      '#title' => $this->t('Base URL of your IIIF Media Server public accesible from the Outside World.'),
      '#description' => $this->t('Please provide a publicly accessible IIIF server URL. This URL will be used for AJAX and JS calls. Trailing Slashes will be removed.'),
      '#default_value' => !empty($config->get('pub_server_url')) ? $config->get('pub_server_url') : 'http://localhost:8183/iiif/2',
      '#required' => TRUE
    ];

    $form['int_server_url'] = [
      '#type' => 'url',
      '#title' => $this->t('Base URL of your IIIF Media Server accesible from inside this Webserver.'),
      '#description' => $this->t('Please provide Internal IIIF server URL. This URL will be used by Internal Server calls and needs to be locally accesible by your server, e.g 127.0.0.1 or an local Docker alias. Trailing Slashes will be removed.'),
      '#default_value' => !empty($config->get('int_server_url')) ? $config->get('int_server_url') : 'http://esmero-cantaloupe:8182/iiif/2',
      '#required' => TRUE
    ];

    return parent::buildForm($form, $form_state);
  }

  /**
   * @inheritDoc
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    $validator = new IiifUrlValidator();

    $internalUrlValid = $validator->checkUrl($form_state->getValue('int_server_url'), $validator::IIIF_INTERNAL_URL_TYPE );
    if (!$internalUrlValid) {
      $form_state->setErrorByName('int_server_url', $this->t("We could not contact your Internal IIIF server"));
    }

    $publicUrlValid = $validator->checkUrl($form_state->getValue('pub_server_url'), $validator::IIIF_EXTERNAL_URL_TYPE);
    if (!$publicUrlValid) {
      $form_state->setErrorByName('pub_server_url', $this->t("We could not contact your Public IIIF server"));
    }

    parent::validateForm(
      $form,
      $form_state
    ); // TODO: Change the autogenerated stub
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $this->config('format_strawberryfield.iiif_settings')
      ->set('pub_server_url', rtrim($form_state->getValue('pub_server_url'),"/"))
      ->set('int_server_url',  rtrim($form_state->getValue('int_server_url'),"/"))
      ->save();

    parent::submitForm($form, $form_state);
  }

}